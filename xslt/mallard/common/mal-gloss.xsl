<?xml version='1.0' encoding='UTF-8'?><!-- -*- indent-tabs-mode: nil -*- -->
<!--
This program is free software; you can redistribute it and/or modify it under
the terms of the GNU Lesser General Public License as published by the Free
Software Foundation; either version 2 of the License, or (at your option) any
later version.

This program is distributed in the hope that it will be useful, but WITHOUT
ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
details.

You should have received a copy of the GNU Lesser General Public License
along with this program; see the file COPYING.LGPL.  If not, write to the
Free Software Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
02111-1307, USA.
-->

<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                xmlns:mal="http://projectmallard.org/1.0/"
                xmlns:cache="http://projectmallard.org/cache/1.0/"
                xmlns:gloss="http://projectmallard.org/experimental/gloss/"
                xmlns:str="http://exslt.org/strings"
                exclude-result-prefixes="mal cache gloss str"
                version="1.0">

<!--!!==========================================================================
Mallard - Glossaries
Common templates for the Mallard Glossary extension.

This stylesheet contains utility templates for locating and linking to terms
with the Mallard Glossary extension.
-->


<xsl:key name="mal.gloss.key"
         match="/cache:cache//mal:info/gloss:term"
         use="mal:title[1]"/>


<!--**==========================================================================
mal.gloss.terms
Determine whether a glossary term matches a criterion.
$match: A #{gloss:match} element containing criteria.
$term: A #{gloss:term} element to attempt to match.

This template determines whether a glossary term matches a condition, as given
by a #{gloss:match} element. If the term matches, an empty string is output.
Otherwise, a non-empty string is output.

To determine if a term matches a set of matches, call this template for each
#{gloss:match} element, then check if the concatenated result is empty.
-->
<xsl:template name="mal.gloss.match">
  <xsl:param name="match"/>
  <xsl:param name="term"/>
  <xsl:if test="$match/@tags and not(str:split($match/@tags) = str:split($term/@tags))">
    <xsl:text>x</xsl:text>
  </xsl:if>
</xsl:template>


<!--**==========================================================================
mal.gloss.terms
Output the glossary terms for a page or section.
$node: The glossary #{page} or #{section} to output terms for.

This template outputs the terms that should be displayed for ${node}. Terms are
output as full copies from @{mal.cache}, except they the #{gloss:id} attribute
added. This attribute contains an ID for the #{term} element in the cache, as
generated by the #{generate-id} function.

This template filters the results based on any #{gloss:match} elements in the
#{info} child of ${node}, and also excludes terms that are matched by child
sections of ${node}. Terms with the same primary title are all included. It
is the responsibility of the caller to merge these.

The results are not sorted. The output is a result tree fragment.  To use these
results, call #{exsl:node-set} on them.
-->
<xsl:template name="mal.gloss.terms">
  <xsl:param name="node" select="."/>
  <xsl:for-each select="$mal.cache//mal:info/gloss:term">
    <xsl:variable name="term" select="."/>
    <xsl:variable name="exclude">
      <xsl:for-each select="$node/ancestor-or-self::*/mal:info/gloss:match">
        <xsl:call-template name="mal.gloss.match">
          <xsl:with-param name="match" select="."/>
          <xsl:with-param name="term" select="$term"/>
        </xsl:call-template>
      </xsl:for-each>
      <xsl:for-each select="$node/mal:section/mal:info/gloss:match">
        <xsl:variable name="secmatch">
          <xsl:call-template name="mal.gloss.match">
            <xsl:with-param name="match" select="."/>
            <xsl:with-param name="term" select="$term"/>
          </xsl:call-template>
        </xsl:variable>
        <xsl:if test="$secmatch = ''">
          <xsl:text>x</xsl:text>
        </xsl:if>
      </xsl:for-each>
    </xsl:variable>
    <xsl:if test="$exclude = ''">
      <xsl:copy>
        <xsl:attribute name="gloss:id">
          <xsl:value-of select="generate-id(.)"/>
        </xsl:attribute>
        <xsl:copy-of select="node()"/>
      </xsl:copy>
    </xsl:if>
  </xsl:for-each>
</xsl:template>

</xsl:stylesheet>
